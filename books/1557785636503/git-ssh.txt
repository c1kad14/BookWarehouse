	Check for existing ssh keys
Open Git Bash.

Enter ls -al ~/.ssh to see if existing SSH keys are present:

$ ls -al ~/.ssh
# Lists the files in your .ssh directory, if they exist

Check the directory listing to see if you already have a public SSH key.

	Add new ssh
Open Git Bash.

Paste the text below, substituting in your GitHub email address.

$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

This creates a new ssh key, using the provided email as a label.

> Generating public/private rsa key pair.

When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location.

> Enter a file in which to save the key (/c/Users/you/.ssh/id_rsa):[Press enter]

At the prompt, type a secure passphrase. For more information, see "Working with SSH key passphrases".

> Enter passphrase (empty for no passphrase): [Type a passphrase]
> Enter same passphrase again: [Type passphrase again]

	Adding your SSH key to the ssh-agent
Open Git Bash.

Ensure the ssh-agent is running:

eval "$(ssh-agent)"

Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_rsa in the command with the name of your private key file.

ssh-add ~/.ssh/id_rsa

	Adding a new SSH key to your GitHub account
Open Git Bash.

Copy the SSH key to your clipboard.

clip < ~/.ssh/id_rsa.pub

Paste it in Github Account